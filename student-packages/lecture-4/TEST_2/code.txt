#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/adc.h"
#include "hardware/pwm.h"

// Morse code timing definitions
#define DOT_DURATION 200
#define DASH_DURATION (DOT_DURATION * 3)
#define SYMBOL_SPACE (DOT_DURATION)
#define LETTER_SPACE (DOT_DURATION * 3)
#define WORD_SPACE (DOT_DURATION * 7)
#define MAX_INPUT 100

// Morse code lookup table
const char *MORSE_CODE[] = {
    ".-",   // A
    "-...", // B
    "-.-.", // C
    "-..",  // D
    ".",    // E
    "..-.", // F
    "--.",  // G
    "....", // H
    "..",   // I
    ".---", // J
    "-.-",  // K
    ".-..", // L
    "--",   // M
    "-.",   // N
    "---",  // O
    ".--.", // P
    "--.-", // Q
    ".-.",  // R
    "...",  // S
    "-",    // T
    "..-",  // U
    "...-", // V
    ".--",  // W
    "-..-", // X
    "-.--", // Y
    "--.."  // Z
};

// Pin definitions
const uint LED_PIN = 15;
const uint ADC_PIN = 26;

// Function declarations
void init_pwm(void);
void init_adc(void);
uint16_t read_brightness(void);
void set_led_brightness(uint16_t brightness);
void display_dot(void);
void display_dash(void);
void display_character(char c);
bool read_line(char *buffer, int max_length);
void clear_input_buffer(void);

// Map function
uint16_t map_value(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

int main() {
    stdio_init_all();
    sleep_ms(2000); // Wait for USB serial initialization

    // Initialize hardware
    init_pwm();
    init_adc();

    printf("Morse Code LED Controller\n");
    printf("Use potentiometer to control LED brightness\n\n");

    char input[MAX_INPUT];

    while (true) {
        printf("Enter text to convert to Morse code (max %d chars): ", MAX_INPUT - 1);

        if (read_line(input, MAX_INPUT)) {
            printf("Converting: %s\n", input);

            for (int i = 0; input[i] != '\0'; i++) {
                display_character(input[i]);
            }

            printf("\nConversion complete!\n\n");
        }

        clear_input_buffer(); // Clear any remaining input
        sleep_ms(100);
    }

    return 0;
}

// PWM initialization
void init_pwm(void) {
    gpio_set_function(LED_PIN, GPIO_FUNC_PWM);
    uint slice_num = pwm_gpio_to_slice_num(LED_PIN);
    pwm_set_wrap(slice_num, 65535);
    pwm_set_gpio_level(LED_PIN, 0);
    pwm_set_enabled(slice_num, true);
}

// ADC initialization
void init_adc(void) {
    adc_init();
    adc_gpio_init(ADC_PIN);
    adc_select_input(0);
}

// Read potentiometer value and scale to PWM range
uint16_t read_brightness(void) {
    uint16_t adc_value = adc_read();
    return map_value(adc_value, 0, 4095, 0, 65535);
}

// Set LED brightness using PWM
void set_led_brightness(uint16_t brightness) {
    pwm_set_gpio_level(LED_PIN, brightness);
}

// Display Morse code dot
void display_dot(void) {
    uint16_t brightness = read_brightness();
    set_led_brightness(brightness);
    sleep_ms(DOT_DURATION);
    set_led_brightness(0);
    sleep_ms(SYMBOL_SPACE);
}

// Display Morse code dash
void display_dash(void) {
    uint16_t brightness = read_brightness();
    set_led_brightness(brightness);
    sleep_ms(DASH_DURATION);
    set_led_brightness(0);
    sleep_ms(SYMBOL_SPACE);
}

// Display character in Morse code
void display_character(char c) {
    if (c == ' ') {
        sleep_ms(WORD_SPACE);
        return;
    }

    if (c >= 'a' && c <= 'z') {
        c -= 'a' - 'A'; // Convert to uppercase
    }

    if (c < 'A' || c > 'Z') {
        return; // Ignore non-alphabetic characters
    }

    const char *pattern = MORSE_CODE[c - 'A'];

    for (int i = 0; pattern[i] != '\0'; i++) {
        if (pattern[i] == '.') {
            display_dot();
        } else if (pattern[i] == '-') {
            display_dash();
        }
    }

    sleep_ms(LETTER_SPACE);
}

// Function to clear input buffer
void clear_input_buffer(void) {
    while (getchar_timeout_us(0) != PICO_ERROR_TIMEOUT) {
        // Clear any remaining characters
    }
}

// Function to read input
bool read_line(char *buffer, int max_length) {
    int index = 0;
    int c;

    while (index < max_length - 1) {
        c = getchar_timeout_us(50000);

        if (c == PICO_ERROR_TIMEOUT) {
            if (index == 0)
                continue;
            break;
        }

        if (c == '\r' || c == '\n') {
            if (index > 0)
                break;
            continue;
        }

        putchar(c);
        buffer[index++] = (char)c;
    }

    buffer[index] = '\0';
    putchar('\n');
    return index > 0;
}
